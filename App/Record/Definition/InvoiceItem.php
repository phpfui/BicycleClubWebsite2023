<?php

namespace App\Record\Definition;

/**
 * Autogenerated. Do not modify. Modify SQL table, then generate with \PHPFUI\ORM\Tool\Generate\CRUD class.
 *
 * @property ?string $description MySQL type text
 * @property ?string $detailLine MySQL type char(100)
 * @property int $invoiceId MySQL type int
 * @property \App\Record\Invoice $invoice related record
 * @property ?float $price MySQL type decimal(5,2)
 * @property ?int $quantity MySQL type int
 * @property ?float $shipping MySQL type decimal(5,2)
 * @property int $storeItemDetailId MySQL type int
 * @property \App\Record\StoreItemDetail $storeItemDetail related record
 * @property int $storeItemId MySQL type int
 * @property \App\Record\StoreItem $storeItem related record
 * @property ?float $tax MySQL type decimal(7,2)
 * @property ?string $title MySQL type char(100)
 * @property ?int $type MySQL type int
 */
abstract class InvoiceItem extends \PHPFUI\ORM\Record
	{
	protected static bool $autoIncrement = false;

	/** @var array<string, \PHPFUI\ORM\FieldDefinition> */
	protected static array $fields = [];

	/** @var array<string> */
	protected static array $primaryKeys = ['invoiceId', 'storeItemId', 'storeItemDetailId', ];

	protected static string $table = 'invoiceItem';

	public function initFieldDefinitions() : static
		{
		if (! \count(static::$fields))
			{
			static::$fields = [
				'description' => new \PHPFUI\ORM\FieldDefinition('text', 'string', 65535, true, ),
				'detailLine' => new \PHPFUI\ORM\FieldDefinition('char(100)', 'string', 100, true, ),
				'invoiceId' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, false, ),
				'price' => new \PHPFUI\ORM\FieldDefinition('decimal(5,2)', 'float', 6, true, ),
				'quantity' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, true, ),
				'shipping' => new \PHPFUI\ORM\FieldDefinition('decimal(5,2)', 'float', 6, true, ),
				'storeItemDetailId' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, false, ),
				'storeItemId' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, false, ),
				'tax' => new \PHPFUI\ORM\FieldDefinition('decimal(7,2)', 'float', 8, true, ),
				'title' => new \PHPFUI\ORM\FieldDefinition('char(100)', 'string', 100, true, ),
				'type' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, true, 0, ),
			];
			}

		return $this;
		}
	}
