<?php

namespace App\Record\Definition;

/**
 * Autogenerated. Do not modify. Modify SQL table, then generate with \PHPFUI\ORM\Tool\Generate\CRUD class.
 *
 * @property int $cashOnly MySQL type int
 * @property ?string $description MySQL type varchar(60)
 * @property float $discount MySQL type float(10,2)
 * @property ?string $discountCode MySQL type char(15)
 * @property int $discountCodeId MySQL type int
 * @property string $expirationDate MySQL type date
 * @property ?int $maximumUses MySQL type int
 * @property ?int $repeatCount MySQL type int
 * @property string $startDate MySQL type date
 * @property int $type MySQL type int
 * @property ?string $validItemNumbers MySQL type text
 */
abstract class DiscountCode extends \PHPFUI\ORM\Record
	{
	protected static bool $autoIncrement = true;

	/** @var array<string, \PHPFUI\ORM\FieldDefinition> */
	protected static array $fields = [];

	/** @var array<string> */
	protected static array $primaryKeys = ['discountCodeId', ];

	protected static string $table = 'discountCode';

	public function initFieldDefinitions() : static
		{
		if (! \count(static::$fields))
			{
			static::$fields = [
				'cashOnly' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, false, 0, ),
				'description' => new \PHPFUI\ORM\FieldDefinition('varchar(60)', 'string', 60, true, ),
				'discount' => new \PHPFUI\ORM\FieldDefinition('float(10,2)', 'float', 10, false, 0.00, ),
				'discountCode' => new \PHPFUI\ORM\FieldDefinition('char(15)', 'string', 15, true, ),
				'discountCodeId' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, false, ),
				'expirationDate' => new \PHPFUI\ORM\FieldDefinition('date', 'string', 10, false, ),
				'maximumUses' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, true, ),
				'repeatCount' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, true, ),
				'startDate' => new \PHPFUI\ORM\FieldDefinition('date', 'string', 10, false, ),
				'type' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, false, 0, ),
				'validItemNumbers' => new \PHPFUI\ORM\FieldDefinition('text', 'string', 65535, true, ),
			];
			}

		return $this;
		}
	}
