<?php

namespace App\DB\Migration;

/**
 * @inheritDoc
 *
 * @property \PHPFUI\ORM\RecordCursor<\App\Record\File> $FileChildren
 * @property \App\Record\Folder $parentFolder
 *
 * Autogenerated. Do not modify. Modify SQL table, then generate with \PHPFUI\ORM\Tool\Generate\CRUD class.
 *
 * @property string $fileFolder MySQL type varchar(255)
 * @property int $fileFolderId MySQL type int
 * @property ?int $parentFolderId MySQL type int
 * @property ?int $permissionId MySQL type int
 * @property \App\Record\Permission $permission related record
 */
class FileFolder extends \PHPFUI\ORM\Record
	{
	protected static bool $autoIncrement = true;

	/** @var array<string, \PHPFUI\ORM\FieldDefinition> */
	protected static array $fields = [];

	/** @var array<string> */
	protected static array $primaryKeys = ['folderId', ];

	protected static string $table = 'fileFolder';

	/** @var array<string, array<string>> */
	 protected static array $virtualFields = [
	 	'FileChildren' => [\PHPFUI\ORM\Children::class, \App\Table\File::class],
	 	'parentFolder' => [\PHPFUI\ORM\RelatedRecord::class, \App\Record\Folder::class],
	 ];

	 public function clean() : static
		 {
		 $this->cleanProperName('fileFolder');

		 return $this;
		 }

	 public function initFieldDefinitions() : static
		 {
		 if (! \count(static::$fields))
			 {
			 static::$fields = [
			 	'fileFolder' => new \PHPFUI\ORM\FieldDefinition('varchar(255)', 'string', 255, false, '', ),
			 	'fileFolderId' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, false, ),
			 	'parentFolderId' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, true, 0, ),
			 	'permissionId' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, true, ),
			 ];
			 }

			return $this;
			}
	}
