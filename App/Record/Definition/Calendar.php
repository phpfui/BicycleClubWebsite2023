<?php

namespace App\Record\Definition;

/**
 * Autogenerated. Do not modify. Modify SQL table, then generate with \PHPFUI\ORM\Tool\Generate\CRUD class.
 *
 * @property int $calendarId MySQL type int
 * @property \App\Record\Calendar $calendar related record
 * @property ?string $description MySQL type text
 * @property ?string $distances MySQL type char(20)
 * @property string $eventDate MySQL type date
 * @property ?int $eventDays MySQL type int
 * @property ?int $eventType MySQL type int
 * @property ?string $location MySQL type varchar(100)
 * @property int $pending MySQL type int
 * @property ?int $price MySQL type int
 * @property ?string $privateContact MySQL type char(50)
 * @property ?string $privateEmail MySQL type char(50)
 * @property ?string $publicContact MySQL type char(50)
 * @property ?string $publicEmail MySQL type char(50)
 * @property ?string $startTime MySQL type time
 * @property ?string $state MySQL type char(2)
 * @property ?string $title MySQL type char(100)
 * @property ?string $webSite MySQL type char(100)
 */
abstract class Calendar extends \PHPFUI\ORM\Record
	{
	protected static bool $autoIncrement = true;

	/** @var array<string, \PHPFUI\ORM\FieldDefinition> */
	protected static array $fields = [];

	/** @var array<string> */
	protected static array $primaryKeys = ['calendarId', ];

	protected static string $table = 'calendar';

	public function initFieldDefinitions() : static
		{
		if (! \count(static::$fields))
			{
			static::$fields = [
				'calendarId' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, false, ),
				'description' => new \PHPFUI\ORM\FieldDefinition('text', 'string', 65535, true, ),
				'distances' => new \PHPFUI\ORM\FieldDefinition('char(20)', 'string', 20, true, ),
				'eventDate' => new \PHPFUI\ORM\FieldDefinition('date', 'string', 10, false, ),
				'eventDays' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, true, ),
				'eventType' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, true, ),
				'location' => new \PHPFUI\ORM\FieldDefinition('varchar(100)', 'string', 100, true, ),
				'pending' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, false, 1, ),
				'price' => new \PHPFUI\ORM\FieldDefinition('int', 'int', 0, true, ),
				'privateContact' => new \PHPFUI\ORM\FieldDefinition('char(50)', 'string', 50, true, ),
				'privateEmail' => new \PHPFUI\ORM\FieldDefinition('char(50)', 'string', 50, true, ),
				'publicContact' => new \PHPFUI\ORM\FieldDefinition('char(50)', 'string', 50, true, ),
				'publicEmail' => new \PHPFUI\ORM\FieldDefinition('char(50)', 'string', 50, true, ),
				'startTime' => new \PHPFUI\ORM\FieldDefinition('time', 'string', 0, true, ),
				'state' => new \PHPFUI\ORM\FieldDefinition('char(2)', 'string', 2, true, ),
				'title' => new \PHPFUI\ORM\FieldDefinition('char(100)', 'string', 100, true, ),
				'webSite' => new \PHPFUI\ORM\FieldDefinition('char(100)', 'string', 100, true, ),
			];
			}

		return $this;
		}
	}
